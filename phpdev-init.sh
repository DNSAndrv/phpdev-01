#!/bin/bash
read -p 'Имя БД: ' DbName
read -p 'Имя пользователя: '  userName

apt -y install curl wget software-properties-common apt-transport-https git nano php php-fpm nginx mysql-server phpmyadmin  &&
wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add - &&
sudo add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" &&
apt install code &&
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" &&
mysql -u root --execute="
UPDATE mysql.user SET plugin = 'mysql_native_password', authentication_string  = '' WHERE user = 'root';
" &&
systemctl restart mysql.service && systemctl status mysql.service &&
mysql -u root --execute="
CREATE DATABASE IF NOT EXISTS ${DbName};
GRANT ALL PRIVILEGES ON ${DbName}.* TO '${userName}'@'localhost';
" &&
echo 'Change rootAllowNoPassord in phpmyadmin settings\n' &&
echo '== Open nano ==' && sleep 1 &&
nano /etc/phpmyadmin/config.inc.php 



chmod -R g+w /var/www && chown -R www-data:www-data /var/www &&
rm /etc/nginx/sites-enabled/default &&
echo "##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files \$uri \$uri/ =404;
	}


	location /phpmyadmin {
		root /usr/share/;
		index index.php index.html index.htm;
	}

	
	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		try_files \$uri =404;
		root /usr/share/;
		fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		fastcgi_index index.php;
		fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
		include /etc/nginx/fastcgi_params;
	#	include snippets/fastcgi-php.conf;
	
		# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
		# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
" > /etc/nginx/sites-enabled/default

read -p 'Создать новый проект ?[y/n] ' isCreateDomain

if [ ${isCreateDomain}="y" ]
then
sh ./createDomain.sh
else
echo '	Готово!'
fi

